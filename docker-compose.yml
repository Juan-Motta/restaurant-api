services:
  restaurant-api:
    build:
      context: .
      dockerfile: Dockerfile
      target: server
    volumes:
      - .:/app
    container_name: restaurant_api
    env_file:
      - .env
    ports:
      - 9000:9000
    restart: always
    depends_on:
      postgres:
        condition: service_healthy
  
  restaurant-api-migrate:
    build:
      context: .
      dockerfile: Dockerfile
      target: migrate
    volumes:
      - .:/app
    container_name: restaurant_api_migrate
    env_file:
      - .env
    depends_on:
      postgres:
        condition: service_healthy
  
  restaurant-celery:
    build:
      context: .
      dockerfile: Dockerfile
      target: celery
    volumes:
      - .:/app
    container_name: restaurant_celery
    env_file:
      - .env
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
  
  celery-insights:
    image: ghcr.io/danyi1212/celery-insights-all:latest
    container_name: celery-insights
    environment:
      BROKER_URL: redis://redis:6379/0
      RESULT_BACKEND: redis://redis:6379/0
    ports:
      - "8555:8555"  # Expose port 8555
    depends_on:
      redis:
        condition: service_healthy  # Wait for Redis to be healthy

  postgres:
    image: postgres:16-alpine
    container_name: restaurant_postgres
    environment:
      POSTGRES_USER: ${DB_USER:-postgres}
      POSTGRES_PASSWORD: ${DB_PASSWORD:-postgres}
      POSTGRES_DB: "restaurant_db"
    ports:
      - "54320:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER:-postgres}"]
      interval: 5s
      timeout: 5s
      retries: 20

  redis:
    image: redis:alpine
    container_name: restaurant_redis
    ports:
      - "63790:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 5s
      retries: 3